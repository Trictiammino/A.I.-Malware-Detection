from matplotlib import pyplot as plt
from sklearn.ensemble import RandomForestClassifier, VotingClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
import functions


# path dei file
X_filtered_path = "dataset/X_filtered.csv"
Train_Y_path = "dataset/EmberYTrain.csv"
Test_X_path = "dataset/EmberTest/EmberXTest.csv"
Test_Y_path = "dataset/EmberTest/EmberYTest.csv"

# caricamento dei file
X = functions.load(X_filtered_path)
Y = functions.load(Train_Y_path)
Ember_X_Test = functions.load(Test_X_path)
Ember_Y_Test = functions.load(Test_Y_path)

# conversione di Y in array
Y_array = Y['Label'].values

# ------------------------------------PARAMETRI DEI MODELLI-----------------------------------------------------

# albero decisionale
best_criterion_DT = 'entropy'

# random forest
best_criterion_RF = 'entropy'
best_randomization = 'sqrt'
best_bootstrap_size = 0.9
best_n_trees = 30

# knn
best_k = 1

# -------------------------------------------CREAZIONE ALBERO---------------------------------------------------------

# creazione di un albero decisionale con il miglior criterio individuato in precedenza
DT = DecisionTreeClassifier(criterion=best_criterion_DT, min_samples_split=500, random_state=42)


# ---------------------------------------------CREAZIONE RF-----------------------------------------------------------

# creazione di una Random Forest con i migliori parametri individuati in precedenza
Random_Forest = RandomForestClassifier(criterion=best_criterion_RF,
                                       max_features=best_randomization,
                                       bootstrap=True,
                                       max_samples=best_bootstrap_size,
                                       n_estimators=best_n_trees,
                                       random_state=42)


# --------------------------------------------CREAZIONE KNN-----------------------------------------------------------

# creazione del KNN con il miglior valore 'k' individuato in precedenza
knn = KNeighborsClassifier(n_neighbors=best_k)


# ------------------------------------------CREAZIONE ENSEMBLE--------------------------------------------------------

# creazione dell'ensemble con i tre modelli e utilizzando la votazione a maggioranza (voting = hard)
ensemble = VotingClassifier(estimators=[('DT', DT), ('RF', Random_Forest), ('KNN', knn)], voting='hard')

# filtraggio di EmberXTest.csv in base alle feature contenute in X
Ember_X_Test_filtrato = Ember_X_Test[X.columns.values]

# addestramento dell'ensemble su X
ensemble.fit(X, Y_array)

# previsioni dell'ensemble sul dataset di test
y_predicted = ensemble.predict(Ember_X_Test_filtrato)

# calcolo della matrice di confusione dell'ensembled
conf_matrix = confusion_matrix(Ember_Y_Test, y_predicted)

# settaggio parametri per la visualizzazione della matrice di confusione dell'ensembled
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix)
disp.plot(cmap='Blues')
disp.ax_.set_title("Matrice di confusione dell'ensembled")

# visualizzazione della matrice di confusione dell'ensembled
plt.show()

# stampa del report di classificazione dell'ensembled
class_report = classification_report(Ember_Y_Test, y_predicted)
print("\nReport di classificazione dell'ensembled:\n")
print(class_report, "\n")
