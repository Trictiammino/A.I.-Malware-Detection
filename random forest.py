from matplotlib import pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report
import functions

# path dei file
X_filtered_path = "dataset/X_filtered.csv"
Train_Y_path = "dataset/EmberYTrain.csv"
Test_X_path = "dataset/EmberTest/EmberXTest.csv"
Test_Y_path = "dataset/EmberTest/EmberYTest.csv"

# caricamento dei file
Y = functions.load(Train_Y_path)
X = functions.load(X_filtered_path)
Ember_X_Test = functions.load(Test_X_path)
Ember_Y_Test = functions.load(Test_Y_path)

# conversione di Y in array
Y_array = Y['Label'].values

# Mutual Info rank calcolato su X_filtered
rank = functions.mutual_info_rank(X, Y)

# inizializzazione della soglia minima e della soglia massima e dello step con cui muoversi tra le due soglie
min_threshold = 0
max = 0.0
for key in rank:
    if key[1] >= max:
        max = key[1]
print("\n\nSoglia massima:", max, "\n\n")
step_threshold = 0.02
max_threshold = max + step_threshold

# settaggio del numero di fold da effettuare tramite il K-Fold Stratificato
folds = 5

# esecuzione del K-fold Stratificato su X
ListXTrain, ListXTest, ListYTrain, ListYTest = functions.stratified_k_fold(X, Y, folds)

# esecuzione della ricerca dei migliori parametri per la Random Forest
best_config, best_rand, best_bootstrap, best_n_trees, best_f, best_n, best_th = functions.determine_RF_k_fold_configuration(ListXTrain, ListYTrain, ListXTest, ListYTest, rank, min_threshold, max_threshold, step_threshold)
print("\n\nMIGLIORI PARAMETRI DELLA RANDOM FOREST INDIVIDUATI:\nFeature Ranking tramite M.I.:\n", 'Criterion: ', best_config, ', randomization: ', best_rand, ', dimensione del bootstrap: ',  best_bootstrap, ', numero di alberi: ', best_n_trees, ', F: ', best_f, ' N: ', best_n, 'soglia M.I.: ', best_th, '\n')


# selezione dei nomi delle migliori feature utilizzando la migliore soglia individuata
toplist = functions.top_feature_select(rank, best_th)
toplist_key = [coppia[0] for coppia in toplist]

# creazione di una Random Forest con i migliori parametri individuati
best_rf_classifier = RandomForestClassifier(criterion=best_config,
                                            max_features=best_rand,
                                            bootstrap=True,
                                            max_samples=best_bootstrap,
                                            n_estimators=best_n_trees,
                                            random_state=42)

# addestramento della Random Forest con le migliori feature selezionate
best_rf_classifier.fit(X.loc[:, toplist_key], Y_array)

# filtraggio di EmberXTest.csv in base alle feature con cui la Random Forest Ã¨ stata addestrata (toplist_key)
Ember_X_Test_filtrato = Ember_X_Test[toplist_key]

# previsioni della Random Forest sul dataset di test
y_predicted = best_rf_classifier.predict(Ember_X_Test_filtrato)

# calcolo della matrice di confusione della Random Forest
conf_matrix_RF = confusion_matrix(Ember_Y_Test, y_predicted)

# settaggio parametri per la visualizzazione della matrice di confusione della Random Forest
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix_RF)
disp.plot(cmap='Blues')
disp.ax_.set_title('Matrice di confusione della Random Forest')

# visualizzazione della matrice di confusione della Random Forest
plt.show()

# stampa del report di classificazione della Random Forest
class_report_RF = classification_report(Ember_Y_Test, y_predicted)
print("\nReport di classificazione della Random Forest:\n")
print(class_report_RF, "\n")
