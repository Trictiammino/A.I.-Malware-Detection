from matplotlib import pyplot as plt
import functions
from sklearn.metrics import confusion_matrix, classification_report, ConfusionMatrixDisplay

# path dei file
X_filtered_path = "dataset/X_filtered.csv"
Train_Y_path = "dataset/EmberYTrain.csv"
Test_X_path = "dataset/EmberTest/EmberXTest.csv"
Test_Y_path = "dataset/EmberTest/EmberYTest.csv"

# caricamento dei file
X_filtered = functions.load(X_filtered_path)
Y = functions.load(Train_Y_path)
Ember_X_Test = functions.load(Test_X_path)
Ember_Y_Test = functions.load(Test_Y_path)


# Mutual Info rank calcolato su X_filtered
rank = functions.mutual_info_rank(X_filtered, Y)
print("\nRANK:", rank)

# inizializzazione della soglia minima e della soglia massima e dello step con cui muoversi tra le due soglie
min_threshold = 0
max = 0.0
for key in rank:
    if key[1] >= max:
        max = key[1]
print("\n\nSoglia massima:", max, "\n\n")
step_threshold = 0.02
max_threshold = max + step_threshold

# settaggio del numero di fold da effettuare tramite il K-Fold Stratificato
folds = 5

# esecuzione del K-fold Stratificato su X
ListXTrain, ListXTest, ListYTrain, ListYTest = functions.stratified_k_fold(X_filtered, Y, folds)

# esecuzione della ricerca dei migliori parametri per l'albero
best_criterion, best_TH, best_N, bestEval = functions.determine_decision_tree_k_fold_configuration(ListXTrain, ListYTrain, ListXTest, ListYTest, rank, min_threshold, max_threshold, step_threshold)
print("\n\nMIGLIORI PARAMETRI DELL'ALBERO INDIVIDUATI:\nFeature Ranking tramite M.I.:\n", 'Criterio: ', best_criterion, ', soglia M.I.: ', best_TH, ', N: ', best_N, ', CV F: ', bestEval, '\n')


# selezione dei nomi delle migliori feature utilizzando la migliore soglia individuata
toplist = functions.top_feature_select(rank, best_TH)
toplist_key = [coppia[0] for coppia in toplist]

# addestramento di un albero decisionale con le migliori feature selezionate e il miglior criterio individuato
DT = functions.decision_tree_learner(X_filtered.loc[:, toplist_key], Y, best_criterion)

# filtraggio di EmberXTest.csv in base alle feature con cui DT Ã¨ stato addestrato (toplist_key)
Ember_X_Test_filtrato_DT = Ember_X_Test[toplist_key]

# visualizza la struttura dell'albero DT
functions.show_tree(DT, toplist_key)

# previsioni dell'albero sul dataset di test
y_predicted_DT = DT.predict(Ember_X_Test_filtrato_DT)

# calcolo della matrice di confusione di DT
conf_matrix_DT = confusion_matrix(Ember_Y_Test, y_predicted_DT)

# settaggio parametri per la visualizzazione della matrice di confusione di DT
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix_DT)
disp.plot(cmap='Blues')
disp.ax_.set_title('Matrice di confusione di DT')

# visualizzazione della matrice di confusione di DT
plt.show()

# stampa del report di classificazione di DT
class_report_DT = classification_report(Ember_Y_Test, y_predicted_DT)
print("\nReport di classificazione di DT:\n")
print(class_report_DT, "\n")
