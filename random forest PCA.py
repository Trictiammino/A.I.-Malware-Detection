from matplotlib import pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report
import functions

# path dei file
X_filtered_path = "dataset/X_filtered.csv"
Train_Y_path = "dataset/EmberYTrain.csv"
Test_X_path = "dataset/EmberTest/EmberXTest.csv"
Test_Y_path = "dataset/EmberTest/EmberYTest.csv"

# caricamento dei file
Y = functions.load(Train_Y_path)
X = functions.load(X_filtered_path)
Ember_X_Test = functions.load(Test_X_path)
Ember_Y_Test = functions.load(Test_Y_path)

# conversione di Y in array
Y_array = Y['Label'].values

# addestramento dell'oggetto 'pca' sul dataframe fornito in input
pca, pca_list, explained_variance = functions.pca(X)

# Applicazione pca con metodo 'transform'
XPCA = functions.apply_pca(X, pca, pca_list)

# settaggio del numero di fold da effettuare tramite il K-Fold Stratificato
folds = 5

# esecuzione del K-fold Stratificato su XPCA
ListXTrainPCA, ListXTestPCA, ListYTrainPCA, ListYTestPCA = functions.stratified_k_fold(XPCA, Y, folds)

# inizializzazione della soglia minima e della soglia massima e dello step con cui muoversi tra le due soglie
minThreshold = 0.95
stepThreshold = 0.01
maxThreshold = 1.0

# esecuzione della ricerca dei migliori parametri per la Random Forest
best_config, best_rand, best_bootstrap, best_n_trees, best_f, best_n, best_th = functions.determine_RF_k_fold_configuration_PCA(ListXTrainPCA, ListYTrainPCA, ListXTestPCA, ListYTestPCA, explained_variance, minThreshold, maxThreshold, stepThreshold)
print("\n\nMIGLIORI PARAMETRI DELLA RANDOM FOREST (PCA) INDIVIDUATI:\nFeature Ranking tramite explained variance:\n", 'Criterion: ', best_config, ', randomization: ', best_rand, ', dimensione del bootstrap: ',  best_bootstrap, ', numero di alberi: ', best_n_trees, ', F: ', best_f, ', N: ', best_n, ', soglia: ', best_th, '\n')


# creazione di una Random Forest con i migliori parametri individuati
best_rf_classifier = RandomForestClassifier(criterion=best_config,
                                            max_features=best_rand,
                                            bootstrap=True,
                                            max_samples=best_bootstrap,
                                            n_estimators=best_n_trees,
                                            random_state=42)

# addestramento della Random Forest con le migliori feature selezionate
best_rf_classifier.fit(XPCA.iloc[:, :best_n], Y_array)

# filtraggio di EmberXTest.csv in base alle feature utilizzate durante il fit dell'oggetto 'pca' (feature di X_filtered)
Ember_X_Test_filtrato = Ember_X_Test[X.columns]

# utilizzo dell'oggetto 'pca' su Ember_X_Test_filtrato
Ember_X_Test_PCA = functions.apply_pca(Ember_X_Test_filtrato, pca, pca_list)

# selezione delle n feature individuate
Ember_X_Test_RF_PCA = Ember_X_Test_PCA.iloc[:, 0:best_n]

# previsioni della Random Forest sul dataset di test
y_predicted = best_rf_classifier.predict(Ember_X_Test_RF_PCA)

# calcolo della matrice di confusione della Random Forest
conf_matrix_RF = confusion_matrix(Ember_Y_Test, y_predicted)

# settaggio parametri per la visualizzazione della matrice di confusione della Random Forest
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix_RF)
disp.plot(cmap='Blues')
disp.ax_.set_title('Matrice di confusione della Random Forest (PCA)')

# visualizzazione della matrice di confusione della Random Forest
plt.show()

# stampa del report di classificazione della Random Forest
class_report_RF = classification_report(Ember_Y_Test, y_predicted)
print("\nReport di classificazione della Random Forest (PCA):\n")
print(class_report_RF, "\n")
