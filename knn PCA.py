from matplotlib import pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report
import functions


# path dei file
X_filtered_path = "dataset/X_filtered.csv"
Train_Y_path = "dataset/EmberYTrain.csv"
Test_X_path = "dataset/EmberTest/EmberXTest.csv"
Test_Y_path = "dataset/EmberTest/EmberYTest.csv"

# caricamento dei file
Y = functions.load(Train_Y_path)
X = functions.load(X_filtered_path)
Ember_X_Test = functions.load(Test_X_path)
Ember_Y_Test = functions.load(Test_Y_path)

# conversione di Y in array
Y_array = Y['Label'].values

# addestramento dell'oggetto 'pca' sul dataframe fornito in input
pca, pca_list, explained_variance = functions.pca(X)

# Applicazione pca con metodo 'transform'
XPCA = functions.apply_pca(X, pca, pca_list)

# settaggio del numero di fold da effettuare tramite il K-Fold Stratificato
folds = 5

# esecuzione del K-fold Stratificato su XPCA
ListXTrainPCA, ListXTestPCA, ListYTrainPCA, ListYTestPCA = functions.stratified_k_fold(XPCA, Y, folds)

# inizializzazione della soglia minima e della soglia massima e dello step con cui muoversi tra le due soglie
minThreshold = 0.95
stepThreshold = 0.01
maxThreshold = 1.0

# esecuzione della ricerca dei migliori parametri per il KNN
best_k, best_f1, best_N, best_TH = functions.determine_KNN_k_fold_configuration_PCA(ListXTrainPCA, ListYTrainPCA, ListXTestPCA, ListYTestPCA, explained_variance, minThreshold, maxThreshold, stepThreshold)
print("\n\nMIGLIORI PARAMETRI DEL KNN (PCA) INDIVIDUATI:\nFeature Ranking tramite explained variance:\n", 'k: ', best_k, ', F: ', best_f1, ', N: ', best_N, ', soglia: ', best_TH, '\n')


# creazione del KNN con il miglior valore 'k' individuato
best_knn_classifier = KNeighborsClassifier(n_neighbors=best_k)

# addestramento del KNN con le migliori feature selezionate
best_knn_classifier.fit(XPCA.iloc[:, :best_N], Y_array)

# filtraggio di EmberXTest.csv in base alle feature utilizzate durante il fit dell'oggetto 'pca' (feature di X_filtered)
Ember_X_Test_filtrato = Ember_X_Test[X.columns]

# utilizzo dell'oggetto 'pca' su Ember_X_Test_filtrato
Ember_X_Test_PCA = functions.apply_pca(Ember_X_Test_filtrato, pca, pca_list)

# selezione delle n feature individuate
Ember_X_Test_KNN_PCA = Ember_X_Test_PCA.iloc[:, 0:best_N]

# previsioni del KNN sul dataset di test
y_predicted = best_knn_classifier.predict(Ember_X_Test_KNN_PCA)

# calcolo della matrice di confusione del KNN
conf_matrix_KNN = confusion_matrix(Ember_Y_Test, y_predicted)

# settaggio parametri per la visualizzazione della matrice di confusione del KNN
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix_KNN)
disp.plot(cmap='Blues')
disp.ax_.set_title('Matrice di confusione del KNN (PCA)')

# visualizzazione della matrice di confusione del KNN
plt.show()

# stampa del report di classificazione del KNN
class_report_KNN = classification_report(Ember_Y_Test, y_predicted)
print("\nReport di classificazione del KNN (PCA):\n")
print(class_report_KNN, "\n")
